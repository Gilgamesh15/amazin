generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  role           Role      @default(USER)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  password       String
  cart           Cart?     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId         String?   @unique
  reviewsWritten Review[]
  sessions       Session[]
  wishlist       Wishlist? @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId     String?   @unique
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id                 String     @id @default(uuid())
  slug               String     @unique
  name               String
  parentId           String?
  saleCategorySaleId String?
  parent             Category?  @relation("CategoryParent", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories      Category[] @relation("CategoryParent")
  featured           Featured?
  saleCategory       Sale?
  products           Product[]  @relation("CategoryToProduct")

  priority Int @default(0)
  level    Int @default(0)
}

//Add, 
//Delete, 
//modify, 
//make categories featured, 
//make categories sales, 
//add products to categories

model Product {
  id                String         @id @default(uuid())
  slug              String         @unique
  name              String
  images            String[]
  description       String
  priceInCents      Int
  rating            Float          @default(0)
  ratingCount       Int            @default(0)
  finalPriceInCents Int?
  discountId        String?        @unique
  amountSold        Int            @default(0)
  amountInStock     Int            @default(0)
  createdAt         DateTime       @default(now())
  discontinuedAt    DateTime?
  inCart            CartItem[]
  discount          Discount?
  Featured          Featured?
  reviews           Review[]
  categories        Category[]     @relation("CategoryToProduct")
  inWishlist        WishlistItem[]
}

//Add
//Delete
//Modify
//

model Review {
  id        String   @id @default(uuid())
  rating    Int
  title     String
  body      String
  authorId  String
  createdAt DateTime @default(now())
  productId String
  author    User     @relation(fields: [authorId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  endsAt     DateTime
  categoryId String     @unique
  name       String
  discounts  Discount[]
  category   Category   @relation(fields: [categoryId], references: [id])
}

model Discount {
  id        String       @id @default(uuid())
  type      DiscountType
  value     Int
  productId String       @unique
  saleId    String
  product   Product      @relation(fields: [productId], references: [id])
  sale      Sale         @relation(fields: [saleId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  user      User?
  cartItems CartItem[]
}

model Wishlist {
  id            String         @id @default(uuid())
  userId        String?        @unique
  user          User?
  wishlistItems WishlistItem[]
}

model WishlistItem {
  id             String   @id @default(uuid())
  wishlist       Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId     String
  chosenVariants String[]
  product        Product  @relation(fields: [productId], references: [id])
  productId      String
}

model CartItem {
  id             String   @id @default(uuid())
  cartId         String
  productId      String
  chosenVariants String[]
  quantity       Int      @default(1)
  cart           Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id])
}

model Featured {
  id          String       @id @default(uuid())
  type        FeaturedType
  productId   String?      @unique
  categoryId  String?      @unique
  image       String
  title       String
  description String
  category    Category?    @relation(fields: [categoryId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum FeaturedType {
  PRODUCT
  CATEGORY
}
